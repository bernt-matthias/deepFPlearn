Splitting data with seed 265742388
100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5919/5919 [00:00<00:00, 9450.59it/s]
Total scaffolds = 1,775 | train scaffolds = 1,108 | val scaffolds = 338 | test scaffolds = 329
Label averages per scaffold, in decreasing order of scaffold frequency,capped at 10 scaffolds and 20 labels:
Scaffold 0
Task 0: count = 1,414 | target average = 0.048091
Scaffold 1
Task 0: count = 1,164 | target average = 0.103952
Scaffold 2
Task 0: count = 80 | target average = 0.025000
Scaffold 3
Task 0: count = 54 | target average = 0.037037
Scaffold 4
Task 0: count = 53 | target average = 0.169811
Scaffold 5
Task 0: count = 44 | target average = 0.295455
Scaffold 6
Task 0: count = 37 | target average = 1.000000
Scaffold 7
Task 0: count = 36 | target average = 1.000000
Scaffold 8
Task 0: count = 33 | target average = 0.333333
Scaffold 9
Task 0: count = 30 | target average = 0.266667
Class sizes
AR 0: 82.11%, 1: 17.89%
Total size = 5,919 | train size = 4,735 | val size = 591 | test size = 593
Building model 0
MoleculeModel(
  (sigmoid): Sigmoid()
  (encoder): MPN(
    (encoder): ModuleList(
      (0): MPNEncoder(
        (dropout_layer): Dropout(p=0.0, inplace=False)
        (act_func): ReLU()
        (W_i): Linear(in_features=147, out_features=300, bias=False)
        (W_h): Linear(in_features=300, out_features=300, bias=False)
        (W_o): Linear(in_features=433, out_features=300, bias=True)
      )
    )
  )
  (ffn): Sequential(
    (0): Dropout(p=0.0, inplace=False)
    (1): Linear(in_features=300, out_features=300, bias=True)
    (2): ReLU()
    (3): Dropout(p=0.0, inplace=False)
    (4): Linear(in_features=300, out_features=1, bias=True)
  )
)
Number of parameters = 355,201
  0%|                                                                                                                                                                                                    | 0/3 [00:00<?, ?it/s]Epoch 0
                                                                                                                                                                                                                               Loss = 5.2673e-01, PNorm = 34.0148, GNorm = 0.6755, lr_0 = 1.5266e-04
  8%|███████████████▋                                                                                                                                                                           | 8/95 [00:00<00:06, 12.87it/s]
 19%|███████████████████████████████████▏                                                                                                                                                      | 18/95 [00:01<00:08,  8.86it/s]Loss = 4.1082e-01, PNorm = 34.0225, GNorm = 0.8316, lr_0 = 2.4840e-04
 29%|██████████████████████████████████████████████████████▊                                                                                                                                   | 28/95 [00:02<00:05, 12.07it/s]
 40%|██████████████████████████████████████████████████████████████████████████▍                                                                                                               | 38/95 [00:03<00:04, 11.92it/s]Loss = 3.7810e-01, PNorm = 34.0454, GNorm = 0.6856, lr_0 = 3.4415e-04
 51%|█████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                            | 48/95 [00:04<00:03, 12.46it/s]
 61%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                        | 58/95 [00:05<00:03, 10.04it/s]Loss = 3.7540e-01, PNorm = 34.0742, GNorm = 0.3517, lr_0 = 4.3989e-04
 72%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                    | 68/95 [00:06<00:02, 12.55it/s]Loss = 3.8534e-01, PNorm = 34.0829, GNorm = 0.7371, lr_0 = 4.8777e-04
 82%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                 | 78/95 [00:06<00:01, 12.97it/s]
 93%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎             | 88/95 [00:07<00:00, 12.76it/s]

  0%|                                                                                                                                                                                                    | 0/3 [00:11<?, ?it/s]
[34m[1mwandb[39m[22m: [32m[41mERROR[39m[49m plotly is required to log interactive plots, install with: `pip install plotly` or convert the plot to an image with `wandb.Image(plt)`
Traceback (most recent call last):
  File "/home/soulios/anaconda3/envs/dfpl_env/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/soulios/anaconda3/envs/dfpl_env/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/home/soulios/git-soulios/deepFPlearn/dfpl/__main__.py", line 295, in <module>
    main()
  File "/home/soulios/git-soulios/deepFPlearn/dfpl/__main__.py", line 241, in main
    traindmpnn(fixed_opts)
  File "/home/soulios/git-soulios/deepFPlearn/dfpl/__main__.py", line 80, in traindmpnn
    mean_score, std_score = chemprop.train.cross_validate(args=opts, train_func=chemprop.train.run_training)
  File "/home/soulios/git-soulios/chemprop/chemprop/utils.py", line 540, in wrap
    result = func(*args, **kwargs)
  File "/home/soulios/git-soulios/deepFPlearn/chemprop_repo/chemprop/train/cross_validate.py", line 123, in cross_validate
    model_scores,scores_and_metrics = train_func(args, data, logger)
  File "/home/soulios/git-soulios/deepFPlearn/chemprop_repo/chemprop/train/run_training.py", line 314, in run_training
    training_scores = evaluate(
  File "/home/soulios/git-soulios/deepFPlearn/chemprop_repo/chemprop/train/evaluate.py", line 142, in evaluate
    results = evaluate_predictions(
  File "/home/soulios/git-soulios/deepFPlearn/chemprop_repo/chemprop/train/evaluate.py", line 97, in evaluate_predictions
    plot_auc(fpr, tpr, auc_value, target=f"Task {i}", filename=os.path.join(dir_path, f"roc_curve_{i}"), wandb_logging=True)
  File "/home/soulios/git-soulios/deepFPlearn/dfpl/plot.py", line 179, in plot_auc
    wandb.log({"roc_plot": plt})
  File "/home/soulios/anaconda3/envs/dfpl_env/lib/python3.9/site-packages/wandb/sdk/wandb_run.py", line 370, in wrapper
    return func(self, *args, **kwargs)
  File "/home/soulios/anaconda3/envs/dfpl_env/lib/python3.9/site-packages/wandb/sdk/wandb_run.py", line 333, in wrapper
    return func(self, *args, **kwargs)
  File "/home/soulios/anaconda3/envs/dfpl_env/lib/python3.9/site-packages/wandb/sdk/wandb_run.py", line 1703, in log
    self._log(data=data, step=step, commit=commit)
  File "/home/soulios/anaconda3/envs/dfpl_env/lib/python3.9/site-packages/wandb/sdk/wandb_run.py", line 1485, in _log
    self._partial_history_callback(data, step, commit)
  File "/home/soulios/anaconda3/envs/dfpl_env/lib/python3.9/site-packages/wandb/sdk/wandb_run.py", line 1364, in _partial_history_callback
    self._backend.interface.publish_partial_history(
  File "/home/soulios/anaconda3/envs/dfpl_env/lib/python3.9/site-packages/wandb/sdk/interface/interface.py", line 568, in publish_partial_history
    data = history_dict_to_json(run, data, step=user_step, ignore_copy_err=True)
  File "/home/soulios/anaconda3/envs/dfpl_env/lib/python3.9/site-packages/wandb/sdk/data_types/utils.py", line 52, in history_dict_to_json
    payload[key] = val_to_json(
  File "/home/soulios/anaconda3/envs/dfpl_env/lib/python3.9/site-packages/wandb/sdk/data_types/utils.py", line 80, in val_to_json
    val = Plotly.make_plot_media(val)
  File "/home/soulios/anaconda3/envs/dfpl_env/lib/python3.9/site-packages/wandb/sdk/data_types/plotly.py", line 49, in make_plot_media
    val = util.matplotlib_to_plotly(val)
  File "/home/soulios/anaconda3/envs/dfpl_env/lib/python3.9/site-packages/wandb/util.py", line 629, in matplotlib_to_plotly
    tools = get_module(
  File "/home/soulios/anaconda3/envs/dfpl_env/lib/python3.9/site-packages/wandb/util.py", line 378, in get_module
    raise wandb.Error(required)
wandb.errors.Error: plotly is required to log interactive plots, install with: `pip install plotly` or convert the plot to an image with `wandb.Image(plt)`