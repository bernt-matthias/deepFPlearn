'<class 'wandb.sdk.wandb_config.Config'>' object has no attribute 'save'
usage: deepFPlearn [-h] {traincmpnn,traindmpnn,train,predict,convert} ...
Command line
python /home/soulios/git-hzdr-soulios/deepFPlearn/dfpl/__main__.py traindmpnn --data_path ./CMPNN/data/tox21.csv --metric auc --dataset_type classification --epochs 1 --smiles_columns smiles --save_dir example/gnn_results/ --split_type scaffold_balanced --num_folds 1 --extra_metrics mcc --class_balance True
Args
{'extra_args': ['traindmpnn', 'True'], 'argument_buffer': {'help': [['-h', '--help'], {'action': 'help', 'default': '==SUPPRESS==', 'help': 'show this help message and exit'}], 'gpu': [['--gpu'], {'choices': []}], 'features_generator': [['--features_generator'], {'choices': ['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized']}]}, 'class_variables': {'data_path': {'comment': 'Path to data CSV file.'}, 'target_columns': {'comment': 'Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.'}, 'ignore_columns': {'comment': 'Name of the columns to ignore when :code:`target_columns` is not provided.'}, 'dataset_type': {'comment': 'Type of dataset. This determines the default loss function used during training.'}, 'loss_function': {'comment': 'Choice of loss function. Loss functions are limited to compatible dataset types.'}, 'multiclass_num_classes': {'comment': 'Number of classes when running multiclass classification.'}, 'separate_val_path': {'comment': 'Path to separate val set, optional.'}, 'separate_test_path': {'comment': 'Path to separate test set, optional.'}, 'spectra_phase_mask_path': {'comment': 'Path to a file containing a phase mask array, used for excluding particular regions in spectra predictions.'}, 'data_weights_path': {'comment': 'Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function'}, 'target_weights': {'comment': 'Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.'}, 'split_type': {'comment': 'Method of splitting the data into train/val/test.'}, 'split_sizes': {'comment': 'Split proportions for train/validation/test sets.'}, 'split_key_molecule': {'comment': 'The index of the key molecule used for splitting when multiple molecules are present and constrained split_type is used, like scaffold_balanced or random_with_repeated_smiles.\n       Note that this index begins with zero for the first molecule.'}, 'num_folds': {'comment': 'Number of folds when performing cross validation.'}, 'folds_file': {'comment': 'Optional file of fold labels.'}, 'val_fold_index': {'comment': 'Which fold to use as val for leave-one-out cross val.'}, 'test_fold_index': {'comment': 'Which fold to use as test for leave-one-out cross val.'}, 'crossval_index_dir': {'comment': 'Directory in which to find cross validation index files.'}, 'crossval_index_file': {'comment': 'Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.'}, 'seed': {'comment': 'Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.'}, 'pytorch_seed': {'comment': 'Seed for PyTorch randomness (e.g., random initial weights).'}, 'metric': {'comment': 'Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification, "rmse" for regression, and "sid" for spectra.'}, 'extra_metrics': {'comment': 'Additional metrics to use to evaluate the model. Not used for early stopping.'}, 'save_dir': {'comment': 'Directory where model checkpoints will be saved.'}, 'checkpoint_frzn': {'comment': 'Path to model checkpoint file to be loaded for overwriting and freezing weights.'}, 'save_smiles_splits': {'comment': 'Save smiles for each train/val/test splits for prediction convenience later.'}, 'test': {'comment': 'Whether to skip training and only test the model.'}, 'quiet': {'comment': 'Skip non-essential print statements.'}, 'log_frequency': {'comment': 'The number of batches between each logging of the training loss.'}, 'show_individual_scores': {'comment': 'Show all scores for individual targets, not just average, at the end.'}, 'cache_cutoff': {'comment': 'Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.'}, 'save_preds': {'comment': 'Whether to save test split predictions during training.'}, 'resume_experiment': {'comment': 'Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.'}, 'bias': {'comment': 'Whether to add bias to linear layers.'}, 'hidden_size': {'comment': 'Dimensionality of hidden layers in MPN.'}, 'depth': {'comment': 'Number of message passing steps.'}, 'bias_solvent': {'comment': 'Whether to add bias to linear layers for solvent MPN if :code:`reaction_solvent` is True.'}, 'hidden_size_solvent': {'comment': 'Dimensionality of hidden layers in solvent MPN if :code:`reaction_solvent` is True.'}, 'depth_solvent': {'comment': 'Number of message passing steps for solvent if :code:`reaction_solvent` is True.'}, 'mpn_shared': {'comment': 'Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`'}, 'dropout': {'comment': 'Dropout probability.'}, 'activation': {'comment': 'Activation function.'}, 'atom_messages': {'comment': 'Centers messages on atoms instead of on bonds.'}, 'undirected': {'comment': 'Undirected edges (always sum the two relevant bond vectors).'}, 'ffn_hidden_size': {'comment': 'Hidden dim for higher-capacity FFN (defaults to hidden_size).'}, 'ffn_num_layers': {'comment': 'Number of layers in FFN after MPN encoding.'}, 'features_only': {'comment': 'Use only the additional features in an FFN, no graph network.'}, 'separate_val_features_path': {'comment': 'Path to file with features for separate val set.'}, 'separate_test_features_path': {'comment': 'Path to file with features for separate test set.'}, 'separate_val_phase_features_path': {'comment': 'Path to file with phase features for separate val set.'}, 'separate_test_phase_features_path': {'comment': 'Path to file with phase features for separate test set.'}, 'separate_val_atom_descriptors_path': {'comment': 'Path to file with extra atom descriptors for separate val set.'}, 'separate_test_atom_descriptors_path': {'comment': 'Path to file with extra atom descriptors for separate test set.'}, 'separate_val_bond_features_path': {'comment': 'Path to file with extra atom descriptors for separate val set.'}, 'separate_test_bond_features_path': {'comment': 'Path to file with extra atom descriptors for separate test set.'}, 'config_path': {'comment': 'Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.'}, 'ensemble_size': {'comment': 'Number of models in ensemble.'}, 'aggregation': {'comment': 'Aggregation scheme for atomic vectors into molecular vectors'}, 'aggregation_norm': {'comment': 'For norm aggregation, number by which to divide summed up atomic features'}, 'reaction': {'comment': 'Whether to adjust MPNN layer to take reactions as input instead of molecules.'}, 'reaction_mode': {'comment': 'Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products.\n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.\n    :code:`reac_prod_balance`: concatenates the reactants feature with the products feature, balances imbalanced reactions.\n    :code:`reac_diff_balance`: concatenates the reactants feature with the difference in features between reactants and products, balances imbalanced reactions.\n    :code:`prod_diff_balance`: concatenates the products feature with the difference in features between reactants and products, balances imbalanced reactions.'}, 'reaction_solvent': {'comment': 'Whether to adjust the MPNN layer to take as input a reaction and a molecule, and to encode them with separate MPNNs.'}, 'explicit_h': {'comment': 'Whether H are explicitly specified in input (and should be kept this way). This option is intended to be used\n    with the :code:`reaction` or :code:`reaction_solvent` options, and applies only to the reaction part.'}, 'adding_h': {'comment': "Whether RDKit molecules will be constructed with adding the Hs to them. This option is intended to be used\n    with Chemprop's default molecule or multi-molecule encoders, or in :code:`reaction_solvent` mode where it applies to the solvent only."}, 'epochs': {'comment': 'Number of epochs to run.'}, 'warmup_epochs': {'comment': 'Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.'}, 'init_lr': {'comment': 'Initial learning rate.'}, 'max_lr': {'comment': 'Maximum learning rate.'}, 'final_lr': {'comment': 'Final learning rate.'}, 'grad_clip': {'comment': 'Maximum magnitude of gradient during training.'}, 'class_balance': {'comment': 'Trains with an equal number of positives and negatives in each batch.'}, 'spectra_activation': {'comment': 'Indicates which function to use in dataset_type spectra training to constrain outputs to be positive.'}, 'spectra_target_floor': {'comment': 'Values in targets for dataset type spectra are replaced with this value, intended to be a small positive number used to enforce positive values.'}, 'evidential_regularization': {'comment': 'Value used in regularization for evidential loss function. Value used in literature was 1.'}, 'overwrite_default_atom_features': {'comment': 'Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.'}, 'no_atom_descriptor_scaling': {'comment': 'Turn off atom feature scaling.'}, 'overwrite_default_bond_features': {'comment': 'Overwrites the default atom descriptors with the new ones instead of concatenating them'}, 'no_bond_features_scaling': {'comment': 'Turn off atom feature scaling.'}, 'frzn_ffn_layers': {'comment': 'Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn),\n    where n is specified in the input.\n    Automatically also freezes mpnn weights.'}, 'freeze_first_only': {'comment': 'Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)'}, 'smiles_columns': {'comment': 'List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.'}, 'number_of_molecules': {'comment': 'Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).'}, 'checkpoint_dir': {'comment': 'Directory from which to load model checkpoints (walks directory and ensembles all models that are found).'}, 'checkpoint_path': {'comment': 'Path to model checkpoint (:code:`.pt` file).'}, 'checkpoint_paths': {'comment': 'List of paths to model checkpoints (:code:`.pt` files).'}, 'no_cuda': {'comment': 'Turn off cuda (i.e., use CPU instead of GPU).'}, 'gpu': {'comment': 'Which GPU to use.'}, 'features_generator': {'comment': 'Method(s) of generating additional features.'}, 'features_path': {'comment': 'Path(s) to features to use in FNN (instead of features_generator).'}, 'phase_features_path': {'comment': 'Path to features used to indicate the phase of the data in one-hot vector form. Used in spectra datatype.'}, 'no_features_scaling': {'comment': 'Turn off scaling of features.'}, 'max_data_size': {'comment': 'Maximum number of data points to load.'}, 'num_workers': {'comment': 'Number of workers for the parallel data loading (0 means sequential).'}, 'batch_size': {'comment': 'Batch size.'}, 'atom_descriptors': {'comment': 'Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.'}, 'atom_descriptors_path': {'comment': 'Path to the extra atom descriptors.'}, 'bond_features_path': {'comment': 'Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.'}, 'no_cache_mol': {'comment': 'Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).'}, 'empty_cache': {'comment': 'Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.'}}, 'description': None, 'argument_default': None, 'prefix_chars': '-', 'conflict_handler': 'error', 'prog': '__main__.py', 'usage': None, 'epilog': None, 'formatter_class': 'argparse.HelpFormatter', 'fromfile_prefix_chars': None, 'add_help': True, 'allow_abbrev': True, 'args_from_configs': [], 'data_path': './CMPNN/data/tox21.csv', 'target_columns': None, 'ignore_columns': None, 'dataset_type': 'classification', 'loss_function': 'binary_cross_entropy', 'multiclass_num_classes': 3, 'separate_val_path': None, 'separate_test_path': None, 'spectra_phase_mask_path': None, 'data_weights_path': None, 'target_weights': None, 'split_type': 'scaffold_balanced', 'split_sizes': [0.8, 0.1, 0.1], 'split_key_molecule': 0, 'num_folds': 1, 'folds_file': None, 'val_fold_index': None, 'test_fold_index': None, 'crossval_index_dir': None, 'crossval_index_file': None, 'seed': 0, 'pytorch_seed': 0, 'metric': 'auc', 'extra_metrics': ['mcc'], 'save_dir': 'example/gnn_results/', 'checkpoint_frzn': None, 'save_smiles_splits': False, 'test': False, 'quiet': False, 'log_frequency': 10, 'show_individual_scores': False, 'cache_cutoff': 10000, 'save_preds': False, 'resume_experiment': False, 'bias': False, 'hidden_size': 300, 'depth': 3, 'bias_solvent': False, 'hidden_size_solvent': 300, 'depth_solvent': 3, 'mpn_shared': False, 'dropout': 0.0, 'activation': 'ReLU', 'atom_messages': False, 'undirected': False, 'ffn_hidden_size': 300, 'ffn_num_layers': 2, 'features_only': False, 'separate_val_features_path': None, 'separate_test_features_path': None, 'separate_val_phase_features_path': None, 'separate_test_phase_features_path': None, 'separate_val_atom_descriptors_path': None, 'separate_test_atom_descriptors_path': None, 'separate_val_bond_features_path': None, 'separate_test_bond_features_path': None, 'config_path': None, 'ensemble_size': 1, 'aggregation': 'mean', 'aggregation_norm': 100, 'reaction': False, 'reaction_mode': 'reac_diff', 'reaction_solvent': False, 'explicit_h': False, 'adding_h': False, 'epochs': 1, 'warmup_epochs': 2.0, 'init_lr': 0.0001, 'max_lr': 0.001, 'final_lr': 0.0001, 'grad_clip': None, 'class_balance': True, 'spectra_activation': 'exp', 'spectra_target_floor': 1e-08, 'evidential_regularization': 0, 'overwrite_default_atom_features': False, 'no_atom_descriptor_scaling': False, 'overwrite_default_bond_features': False, 'no_bond_features_scaling': False, 'frzn_ffn_layers': 0, 'freeze_first_only': False, 'smiles_columns': ['smiles'], 'number_of_molecules': 1, 'checkpoint_dir': None, 'checkpoint_path': None, 'checkpoint_paths': None, 'no_cuda': False, 'gpu': None, 'features_generator': None, 'features_path': None, 'phase_features_path': None, 'no_features_scaling': False, 'max_data_size': None, 'num_workers': 8, 'batch_size': 50, 'atom_descriptors': None, 'atom_descriptors_path': None, 'bond_features_path': None, 'no_cache_mol': False, 'empty_cache': False, 'task_names': ['NR-AR', 'NR-AR-LBD', 'NR-AhR', 'NR-Aromatase', 'NR-ER', 'NR-ER-LBD', 'NR-PPAR-gamma', 'SR-ARE', 'SR-ATAD5', 'SR-HSE', 'SR-MMP', 'SR-p53']}