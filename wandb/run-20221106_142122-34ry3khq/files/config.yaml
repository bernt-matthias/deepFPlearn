wandb_version: 1

_action_groups:
  desc: null
  value:
  - <argparse._ArgumentGroup object at 0x7f2631d31fd0>
  - <argparse._ArgumentGroup object at 0x7f26ff113f70>
_actions:
  desc: null
  value:
  - _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None,
    default=None, type=<class 'str'>, choices=None, help='(str, required) Path to
    data CSV file.', metavar=None)
  - _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*',
    const=None, default=None, type=<class 'str'>, choices=None, help='(List[str],
    default=None) Name of the columns containing target values.\n    By default, uses
    all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None)
  - _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*',
    const=None, default=None, type=<class 'str'>, choices=None, help='(List[str],
    default=None) Name of the columns to ignore when :code:`target_columns` is not
    provided.', metavar=None)
  - _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None,
    const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7f2631a7ef70>,
    choices=['regression', 'classification', 'multiclass', 'spectra'], help="(Literal['regression',
    'classification', 'multiclass', 'spectra'], required) Type of dataset. This determines
    the default loss function used during training.", metavar=None)
  - _StoreAction(option_strings=['--loss_function'], dest='loss_function', nargs=None,
    const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7f2631a7eee0>,
    choices=['mse', 'bounded_mse', 'binary_cross_entropy', 'cross_entropy', 'mcc',
    'sid', 'wasserstein', 'mve', 'evidential', 'dirichlet'], help="(Literal['mse',
    'bounded_mse', 'binary_cross_entropy', 'cross_entropy', 'mcc', 'sid', 'wasserstein',
    'mve', 'evidential', 'dirichlet'], default=None) Choice of loss function. Loss
    functions are limited to compatible dataset types.", metavar=None)
  - _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes',
    nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int,
    default=3) Number of classes when running multiclass classification.', metavar=None)
  - _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Path to separate val set, optional.', metavar=None)
  - _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Path to separate test set, optional.', metavar=None)
  - _StoreAction(option_strings=['--spectra_phase_mask_path'], dest='spectra_phase_mask_path',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Path to a file containing a phase mask array, used for excluding
    particular regions in spectra predictions.', metavar=None)
  - _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Path to weights for each molecule in the training data, affecting
    the relative weight of molecules in the loss function', metavar=None)
  - _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*',
    const=None, default=None, type=<class 'float'>, choices=None, help='(List[float],
    default=None) Weights associated with each target, affecting the relative weight
    of targets in the loss function. Must match the number of target columns.', metavar=None)
  - _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None,
    default='random', type=<function get_literals.<locals>.var_type at 0x7f2631a7ee50>,
    choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test',
    'index_predetermined', 'random_with_repeated_smiles'], help="(Literal['random',
    'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined',
    'random_with_repeated_smiles'], default=random) Method of splitting the data into
    train/val/test.", metavar=None)
  - _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs='*',
    const=None, default=None, type=<class 'float'>, choices=None, help='(List[float],
    default=None) Split proportions for train/validation/test sets.', metavar=None)
  - _StoreAction(option_strings=['--split_key_molecule'], dest='split_key_molecule',
    nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int,
    default=0) The index of the key molecule used for splitting when multiple molecules
    are present and constrained split_type is used, like scaffold_balanced or random_with_repeated_smiles.\n       Note
    that this index begins with zero for the first molecule.', metavar=None)
  - _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None,
    default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of
    folds when performing cross validation.', metavar=None)
  - _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None,
    default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional
    file of fold labels.', metavar=None)
  - _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None,
    const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None)
    Which fold to use as val for leave-one-out cross val.', metavar=None)
  - _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None,
    const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None)
    Which fold to use as test for leave-one-out cross val.', metavar=None)
  - _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Directory in which to find cross validation index files.', metavar=None)
  - _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds`
    and :code:`--seed`.', metavar=None)
  - _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0,
    type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when
    splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first
    fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None)
  - _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None,
    const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0)
    Seed for PyTorch randomness (e.g., random initial weights).', metavar=None)
  - _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None,
    default=None, type=<function get_literals.<locals>.var_type at 0x7f2631a7edc0>,
    choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy',
    'binary_cross_entropy', 'sid', 'wasserstein', 'f1', 'mcc', 'bounded_rmse', 'bounded_mae',
    'bounded_mse'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\',
    \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\', \'sid\', \'wasserstein\',
    \'f1\', \'mcc\', \'bounded_rmse\', \'bounded_mae\', \'bounded_mse\'], default=None)
    Metric to use during evaluation. It is also used with the validation set for early
    stopping.\n    Defaults to "auc" for classification, "rmse" for regression, and
    "sid" for spectra.', metavar=None)
  - _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*',
    const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7f2631a7e040>,
    choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy',
    'binary_cross_entropy', 'sid', 'wasserstein', 'f1', 'mcc', 'bounded_rmse', 'bounded_mae',
    'bounded_mse'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2',
    'accuracy', 'cross_entropy', 'binary_cross_entropy', 'sid', 'wasserstein', 'f1',
    'mcc', 'bounded_rmse', 'bounded_mae', 'bounded_mse']], default=[]) Additional
    metrics to use to evaluate the model. Not used for early stopping.", metavar=None)
  - _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None,
    default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory
    where model checkpoints will be saved.', metavar=None)
  - _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None,
    const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None)
    Path to model checkpoint file to be loaded for overwriting and freezing weights.',
    metavar=None)
  - _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits',
    nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Save smiles for each train/val/test splits for prediction convenience later.',
    metavar=None)
  - _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True,
    default=False, type=None, choices=None, help='(bool, default=False) Whether to
    skip training and only test the model.', metavar=None)
  - _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True,
    default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential
    print statements.', metavar=None)
  - _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None,
    const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10)
    The number of batches between each logging of the training loss.', metavar=None)
  - _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores',
    nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Show all scores for individual targets, not just average, at the end.', metavar=None)
  - _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None,
    const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000)
    Maximum number of molecules in dataset to allow caching.\n    Below this number,
    caching is used and data loading is sequential.\n    Above this number, caching
    is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None)
  - _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0,
    const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Whether to save test split predictions during training.', metavar=None)
  - _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment',
    nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Whether to resume the experiment.\n    Loads test results from any folds that
    have already been completed and skips training those folds.', metavar=None)
  - _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True,
    default=False, type=None, choices=None, help='(bool, default=False) Whether to
    add bias to linear layers.', metavar=None)
  - _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None,
    const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300)
    Dimensionality of hidden layers in MPN.', metavar=None)
  - _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None,
    default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of
    message passing steps.', metavar=None)
  - _StoreTrueAction(option_strings=['--bias_solvent'], dest='bias_solvent', nargs=0,
    const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Whether to add bias to linear layers for solvent MPN if :code:`reaction_solvent`
    is True.', metavar=None)
  - _StoreAction(option_strings=['--hidden_size_solvent'], dest='hidden_size_solvent',
    nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int,
    default=300) Dimensionality of hidden layers in solvent MPN if :code:`reaction_solvent`
    is True.', metavar=None)
  - _StoreAction(option_strings=['--depth_solvent'], dest='depth_solvent', nargs=None,
    const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3)
    Number of message passing steps for solvent if :code:`reaction_solvent` is True.',
    metavar=None)
  - _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0,
    const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Whether to use the same message passing neural network for all input molecules\n    Only
    relevant if :code:`number_of_molecules > 1`', metavar=None)
  - _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None,
    default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout
    probability.', metavar=None)
  - _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None,
    default='ReLU', type=<function get_literals.<locals>.var_type at 0x7f2631a7e1f0>,
    choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU',
    'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.",
    metavar=None)
  - _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0,
    const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Centers messages on atoms instead of on bonds.', metavar=None)
  - _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0,
    const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Undirected edges (always sum the two relevant bond vectors).', metavar=None)
  - _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None,
    const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None)
    Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None)
  - _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None,
    const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2)
    Number of layers in FFN after MPN encoding.', metavar=None)
  - _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0,
    const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Use only the additional features in an FFN, no graph network.', metavar=None)
  - _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path',
    nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str],
    default=None) Path to file with features for separate val set.', metavar=None)
  - _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path',
    nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str],
    default=None) Path to file with features for separate test set.', metavar=None)
  - _StoreAction(option_strings=['--separate_val_phase_features_path'], dest='separate_val_phase_features_path',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Path to file with phase features for separate val set.', metavar=None)
  - _StoreAction(option_strings=['--separate_test_phase_features_path'], dest='separate_test_phase_features_path',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Path to file with phase features for separate test set.', metavar=None)
  - _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Path to file with extra atom descriptors for separate val set.',
    metavar=None)
  - _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Path to file with extra atom descriptors for separate test set.',
    metavar=None)
  - _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Path to file with extra atom descriptors for separate val set.',
    metavar=None)
  - _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Path to file with extra atom descriptors for separate test set.',
    metavar=None)
  - _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None,
    const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None)
    Path to a :code:`.json` file containing arguments. Any arguments present in the
    config file\n    will override arguments specified via the command line or by
    the defaults.', metavar=None)
  - _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None,
    const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1)
    Number of models in ensemble.', metavar=None)
  - _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None,
    const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7f2631a7e670>,
    choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean)
    Aggregation scheme for atomic vectors into molecular vectors", metavar=None)
  - _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None,
    const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100)
    For norm aggregation, number by which to divide summed up atomic features', metavar=None)
  - _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True,
    default=False, type=None, choices=None, help='(bool, default=False) Whether to
    adjust MPNN layer to take reactions as input instead of molecules.', metavar=None)
  - '_StoreAction(option_strings=[''--reaction_mode''], dest=''reaction_mode'', nargs=None,
    const=None, default=''reac_diff'', type=<function get_literals.<locals>.var_type
    at 0x7f2631a7e790>, choices=[''reac_prod'', ''reac_diff'', ''prod_diff'', ''reac_prod_balance'',
    ''reac_diff_balance'', ''prod_diff_balance''], help="(Literal[''reac_prod'', ''reac_diff'',
    ''prod_diff'', ''reac_prod_balance'', ''reac_diff_balance'', ''prod_diff_balance''],
    default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`:
    concatenates the reactants feature with the products feature.\n    :code:`reac_diff`:
    concatenates the reactants feature with the difference in features between reactants
    and products.\n    :code:`prod_diff`: concatenates the products feature with the
    difference in features between reactants and products.\n    :code:`reac_prod_balance`:
    concatenates the reactants feature with the products feature, balances imbalanced
    reactions.\n    :code:`reac_diff_balance`: concatenates the reactants feature
    with the difference in features between reactants and products, balances imbalanced
    reactions.\n    :code:`prod_diff_balance`: concatenates the products feature with
    the difference in features between reactants and products, balances imbalanced
    reactions.", metavar=None)'
  - _StoreTrueAction(option_strings=['--reaction_solvent'], dest='reaction_solvent',
    nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Whether to adjust the MPNN layer to take as input a reaction and a molecule, and
    to encode them with separate MPNNs.', metavar=None)
  - _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0,
    const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Whether H are explicitly specified in input (and should be kept this way). This
    option is intended to be used\n    with the :code:`reaction` or :code:`reaction_solvent`
    options, and applies only to the reaction part.', metavar=None)
  - _StoreTrueAction(option_strings=['--adding_h'], dest='adding_h', nargs=0, const=True,
    default=False, type=None, choices=None, help="(bool, default=False) Whether RDKit
    molecules will be constructed with adding the Hs to them. This option is intended
    to be used\n    with Chemprop's default molecule or multi-molecule encoders, or
    in :code:`reaction_solvent` mode where it applies to the solvent only.", metavar=None)
  - _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None,
    default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of
    epochs to run.', metavar=None)
  - _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None,
    const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0)
    Number of epochs during which learning rate increases linearly from :code:`init_lr`
    to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from
    :code:`max_lr` to :code:`final_lr`.', metavar=None)
  - _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None,
    default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001)
    Initial learning rate.', metavar=None)
  - _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None,
    default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001)
    Maximum learning rate.', metavar=None)
  - _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None,
    default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001)
    Final learning rate.', metavar=None)
  - _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None,
    default=None, type=<class 'float'>, choices=None, help='(float, default=None)
    Maximum magnitude of gradient during training.', metavar=None)
  - _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0,
    const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Trains with an equal number of positives and negatives in each batch.', metavar=None)
  - _StoreAction(option_strings=['--spectra_activation'], dest='spectra_activation',
    nargs=None, const=None, default='exp', type=<function get_literals.<locals>.var_type
    at 0x7f2631a7e820>, choices=['exp', 'softplus'], help="(Literal['exp', 'softplus'],
    default=exp) Indicates which function to use in dataset_type spectra training
    to constrain outputs to be positive.", metavar=None)
  - _StoreAction(option_strings=['--spectra_target_floor'], dest='spectra_target_floor',
    nargs=None, const=None, default=1e-08, type=<class 'float'>, choices=None, help='(float,
    default=1e-08) Values in targets for dataset type spectra are replaced with this
    value, intended to be a small positive number used to enforce positive values.',
    metavar=None)
  - _StoreAction(option_strings=['--evidential_regularization'], dest='evidential_regularization',
    nargs=None, const=None, default=0, type=<class 'float'>, choices=None, help='(float,
    default=0) Value used in regularization for evidential loss function. Value used
    in literature was 1.', metavar=None)
  - _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features',
    nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Overwrites the default atom descriptors with the new ones instead of concatenating
    them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None)
  - _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling',
    nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Turn off atom feature scaling.', metavar=None)
  - _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features',
    nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Overwrites the default atom descriptors with the new ones instead of concatenating
    them', metavar=None)
  - _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling',
    nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Turn off atom feature scaling.', metavar=None)
  - _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None,
    const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0)
    Overwrites weights for the first n layers of the ffn from checkpoint model (specified
    checkpoint_frzn),\n    where n is specified in the input.\n    Automatically also
    freezes mpnn weights.', metavar=None)
  - _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only',
    nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default
    (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for
    number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)',
    metavar=None)
  - _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*',
    const=None, default=None, type=<class 'str'>, choices=None, help='(List[str],
    default=None) List of names of the columns containing SMILES strings.\n    By
    default, uses the first :code:`number_of_molecules` columns.', metavar=None)
  - _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules',
    nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int,
    default=1) Number of molecules in each input to the model.\n    This must equal
    the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None)
  - _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None,
    const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None)
    Directory from which to load model checkpoints (walks directory and ensembles
    all models that are found).', metavar=None)
  - _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None,
    const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None)
    Path to model checkpoint (:code:`.pt` file).', metavar=None)
  - _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*',
    const=None, default=None, type=<class 'str'>, choices=None, help='(List[str],
    default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None)
  - _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True,
    default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda
    (i.e., use CPU instead of GPU).', metavar=None)
  - _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None,
    type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.',
    metavar=None)
  - _StoreAction(option_strings=['--features_generator'], dest='features_generator',
    nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count',
    'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s)
    of generating additional features.', metavar=None)
  - _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*',
    const=None, default=None, type=<class 'str'>, choices=None, help='(List[str],
    default=None) Path(s) to features to use in FNN (instead of features_generator).',
    metavar=None)
  - _StoreAction(option_strings=['--phase_features_path'], dest='phase_features_path',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Path to features used to indicate the phase of the data in one-hot
    vector form. Used in spectra datatype.', metavar=None)
  - _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling',
    nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Turn off scaling of features.', metavar=None)
  - _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None,
    const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None)
    Maximum number of data points to load.', metavar=None)
  - _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None,
    const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8)
    Number of workers for the parallel data loading (0 means sequential).', metavar=None)
  - _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None,
    default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.',
    metavar=None)
  - '_StoreAction(option_strings=[''--atom_descriptors''], dest=''atom_descriptors'',
    nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type
    at 0x7f2631c3d310>, choices=[''feature'', ''descriptor''], help="(Literal[''feature'',
    ''descriptor''], default=None) Custom extra atom descriptors.\n    :code:`feature`:
    used as atom features to featurize a given molecule.\n    :code:`descriptor`:
    used as descriptor and concatenated to the machine learned atomic representation.",
    metavar=None)'
  - _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Path to the extra atom descriptors.', metavar=None)
  - _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path',
    nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
    default=None) Path to the extra bond descriptors that will be used as bond features
    to featurize a given molecule.', metavar=None)
  - _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0,
    const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Whether to not cache the RDKit molecule for each SMILES string to reduce memory
    usage (cached by default).', metavar=None)
  - _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0,
    const=True, default=False, type=None, choices=None, help='(bool, default=False)
    Whether to empty all caches before training or predicting. This is necessary if
    multiple jobs are run within a single script and the atom or bond features change.',
    metavar=None)
  - _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None,
    default='==SUPPRESS==', type=None, choices=None, help='show this help message
    and exit', metavar=None)
_annotations:
  desc: null
  value:
    activation: typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU']
    adding_h: builtins.bool
    aggregation: typing.Literal['mean', 'sum', 'norm']
    aggregation_norm: builtins.int
    atom_descriptors: typing.Literal['feature', 'descriptor']
    atom_descriptors_path: builtins.str
    atom_messages: builtins.bool
    batch_size: builtins.int
    bias: builtins.bool
    bias_solvent: builtins.bool
    bond_features_path: builtins.str
    cache_cutoff: builtins.float
    checkpoint_dir: builtins.str
    checkpoint_frzn: builtins.str
    checkpoint_path: builtins.str
    checkpoint_paths: typing.List[str]
    class_balance: builtins.bool
    config_path: builtins.str
    crossval_index_dir: builtins.str
    crossval_index_file: builtins.str
    data_path: builtins.str
    data_weights_path: builtins.str
    dataset_type: typing.Literal['regression', 'classification', 'multiclass', 'spectra']
    depth: builtins.int
    depth_solvent: builtins.int
    dropout: builtins.float
    empty_cache: builtins.bool
    ensemble_size: builtins.int
    epochs: builtins.int
    evidential_regularization: builtins.float
    explicit_h: builtins.bool
    extra_metrics: typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse',
      'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy', 'sid', 'wasserstein',
      'f1', 'mcc', 'bounded_rmse', 'bounded_mae', 'bounded_mse']]
    features_generator: typing.List[str]
    features_only: builtins.bool
    features_path: typing.List[str]
    ffn_hidden_size: builtins.int
    ffn_num_layers: builtins.int
    final_lr: builtins.float
    folds_file: builtins.str
    freeze_first_only: builtins.bool
    frzn_ffn_layers: builtins.int
    gpu: builtins.int
    grad_clip: builtins.float
    hidden_size: builtins.int
    hidden_size_solvent: builtins.int
    ignore_columns: typing.List[str]
    init_lr: builtins.float
    log_frequency: builtins.int
    loss_function: typing.Literal['mse', 'bounded_mse', 'binary_cross_entropy', 'cross_entropy',
      'mcc', 'sid', 'wasserstein', 'mve', 'evidential', 'dirichlet']
    max_data_size: builtins.int
    max_lr: builtins.float
    metric: typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy',
      'cross_entropy', 'binary_cross_entropy', 'sid', 'wasserstein', 'f1', 'mcc',
      'bounded_rmse', 'bounded_mae', 'bounded_mse']
    mpn_shared: builtins.bool
    multiclass_num_classes: builtins.int
    no_atom_descriptor_scaling: builtins.bool
    no_bond_features_scaling: builtins.bool
    no_cache_mol: builtins.bool
    no_cuda: builtins.bool
    no_features_scaling: builtins.bool
    num_folds: builtins.int
    num_workers: builtins.int
    number_of_molecules: builtins.int
    overwrite_default_atom_features: builtins.bool
    overwrite_default_bond_features: builtins.bool
    phase_features_path: builtins.str
    pytorch_seed: builtins.int
    quiet: builtins.bool
    reaction: builtins.bool
    reaction_mode: typing.Literal['reac_prod', 'reac_diff', 'prod_diff', 'reac_prod_balance',
      'reac_diff_balance', 'prod_diff_balance']
    reaction_solvent: builtins.bool
    resume_experiment: builtins.bool
    save_dir: builtins.str
    save_preds: builtins.bool
    save_smiles_splits: builtins.bool
    seed: builtins.int
    separate_test_atom_descriptors_path: builtins.str
    separate_test_bond_features_path: builtins.str
    separate_test_features_path: typing.List[str]
    separate_test_path: builtins.str
    separate_test_phase_features_path: builtins.str
    separate_val_atom_descriptors_path: builtins.str
    separate_val_bond_features_path: builtins.str
    separate_val_features_path: typing.List[str]
    separate_val_path: builtins.str
    separate_val_phase_features_path: builtins.str
    show_individual_scores: builtins.bool
    smiles_columns: typing.List[str]
    spectra_activation: typing.Literal['exp', 'softplus']
    spectra_phase_mask_path: builtins.str
    spectra_target_floor: builtins.float
    split_key_molecule: builtins.int
    split_sizes: typing.List[float]
    split_type: typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval',
      'cv', 'cv-no-test', 'index_predetermined', 'random_with_repeated_smiles']
    target_columns: typing.List[str]
    target_weights: typing.List[float]
    test: builtins.bool
    test_fold_index: builtins.int
    undirected: builtins.bool
    val_fold_index: builtins.int
    warmup_epochs: builtins.float
_atom_descriptors_size:
  desc: null
  value: 0
_atom_features_size:
  desc: null
  value: 0
_bond_features_size:
  desc: null
  value: 0
_crossval_index_sets:
  desc: null
  value: null
_defaults:
  desc: null
  value: {}
_explicit_bool:
  desc: null
  value: false
_features_size:
  desc: null
  value: null
_has_negative_number_optionals:
  desc: null
  value: []
_initialized:
  desc: null
  value: true
_mutually_exclusive_groups:
  desc: null
  value: []
_negative_number_matcher:
  desc: null
  value: re.compile('^-\\d+$|^-\\d*\\.\\d+$')
_num_tasks:
  desc: null
  value: null
_option_string_actions:
  desc: null
  value:
    --activation: _StoreAction(option_strings=['--activation'], dest='activation',
      nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type
      at 0x7f2631a7e1f0>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
      help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU)
      Activation function.", metavar=None)
    --adding_h: _StoreTrueAction(option_strings=['--adding_h'], dest='adding_h', nargs=0,
      const=True, default=False, type=None, choices=None, help="(bool, default=False)
      Whether RDKit molecules will be constructed with adding the Hs to them. This
      option is intended to be used\n    with Chemprop's default molecule or multi-molecule
      encoders, or in :code:`reaction_solvent` mode where it applies to the solvent
      only.", metavar=None)
    --aggregation: _StoreAction(option_strings=['--aggregation'], dest='aggregation',
      nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type
      at 0x7f2631a7e670>, choices=['mean', 'sum', 'norm'], help="(Literal['mean',
      'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular
      vectors", metavar=None)
    --aggregation_norm: _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm',
      nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int,
      default=100) For norm aggregation, number by which to divide summed up atomic
      features', metavar=None)
    --atom_descriptors: '_StoreAction(option_strings=[''--atom_descriptors''], dest=''atom_descriptors'',
      nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type
      at 0x7f2631c3d310>, choices=[''feature'', ''descriptor''], help="(Literal[''feature'',
      ''descriptor''], default=None) Custom extra atom descriptors.\n    :code:`feature`:
      used as atom features to featurize a given molecule.\n    :code:`descriptor`:
      used as descriptor and concatenated to the machine learned atomic representation.",
      metavar=None)'
    --atom_descriptors_path: _StoreAction(option_strings=['--atom_descriptors_path'],
      dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class
      'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.',
      metavar=None)
    --atom_messages: _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages',
      nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
      Centers messages on atoms instead of on bonds.', metavar=None)
    --batch_size: _StoreAction(option_strings=['--batch_size'], dest='batch_size',
      nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int,
      default=50) Batch size.', metavar=None)
    --bias: _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True,
      default=False, type=None, choices=None, help='(bool, default=False) Whether
      to add bias to linear layers.', metavar=None)
    --bias_solvent: _StoreTrueAction(option_strings=['--bias_solvent'], dest='bias_solvent',
      nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
      Whether to add bias to linear layers for solvent MPN if :code:`reaction_solvent`
      is True.', metavar=None)
    --bond_features_path: _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path',
      nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
      default=None) Path to the extra bond descriptors that will be used as bond features
      to featurize a given molecule.', metavar=None)
    --cache_cutoff: _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff',
      nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float,
      default=10000) Maximum number of molecules in dataset to allow caching.\n    Below
      this number, caching is used and data loading is sequential.\n    Above this
      number, caching is not used and data loading is parallel.\n    Use "inf" to
      always cache.', metavar=None)
    --checkpoint_dir: _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir',
      nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
      default=None) Directory from which to load model checkpoints (walks directory
      and ensembles all models that are found).', metavar=None)
    --checkpoint_frzn: _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn',
      nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
      default=None) Path to model checkpoint file to be loaded for overwriting and
      freezing weights.', metavar=None)
    --checkpoint_path: _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path',
      nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
      default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None)
    --checkpoint_paths: _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths',
      nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str],
      default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None)
    --class_balance: _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance',
      nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
      Trains with an equal number of positives and negatives in each batch.', metavar=None)
    --config_path: _StoreAction(option_strings=['--config_path'], dest='config_path',
      nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
      default=None) Path to a :code:`.json` file containing arguments. Any arguments
      present in the config file\n    will override arguments specified via the command
      line or by the defaults.', metavar=None)
    --crossval_index_dir: _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir',
      nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
      default=None) Directory in which to find cross validation index files.', metavar=None)
    --crossval_index_file: _StoreAction(option_strings=['--crossval_index_file'],
      dest='crossval_index_file', nargs=None, const=None, default=None, type=<class
      'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test.
      Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None)
    --data_path: _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None,
      const=None, default=None, type=<class 'str'>, choices=None, help='(str, required)
      Path to data CSV file.', metavar=None)
    --data_weights_path: _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path',
      nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
      default=None) Path to weights for each molecule in the training data, affecting
      the relative weight of molecules in the loss function', metavar=None)
    --dataset_type: _StoreAction(option_strings=['--dataset_type'], dest='dataset_type',
      nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type
      at 0x7f2631a7ef70>, choices=['regression', 'classification', 'multiclass', 'spectra'],
      help="(Literal['regression', 'classification', 'multiclass', 'spectra'], required)
      Type of dataset. This determines the default loss function used during training.",
      metavar=None)
    --depth: _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None,
      default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of
      message passing steps.', metavar=None)
    --depth_solvent: _StoreAction(option_strings=['--depth_solvent'], dest='depth_solvent',
      nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int,
      default=3) Number of message passing steps for solvent if :code:`reaction_solvent`
      is True.', metavar=None)
    --dropout: _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None,
      const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0)
      Dropout probability.', metavar=None)
    --empty_cache: _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache',
      nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
      Whether to empty all caches before training or predicting. This is necessary
      if multiple jobs are run within a single script and the atom or bond features
      change.', metavar=None)
    --ensemble_size: _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size',
      nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int,
      default=1) Number of models in ensemble.', metavar=None)
    --epochs: _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None,
      const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30)
      Number of epochs to run.', metavar=None)
    --evidential_regularization: _StoreAction(option_strings=['--evidential_regularization'],
      dest='evidential_regularization', nargs=None, const=None, default=0, type=<class
      'float'>, choices=None, help='(float, default=0) Value used in regularization
      for evidential loss function. Value used in literature was 1.', metavar=None)
    --explicit_h: _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h',
      nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
      Whether H are explicitly specified in input (and should be kept this way). This
      option is intended to be used\n    with the :code:`reaction` or :code:`reaction_solvent`
      options, and applies only to the reaction part.', metavar=None)
    --extra_metrics: _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics',
      nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type
      at 0x7f2631a7e040>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy',
      'cross_entropy', 'binary_cross_entropy', 'sid', 'wasserstein', 'f1', 'mcc',
      'bounded_rmse', 'bounded_mae', 'bounded_mse'], help="(List[Literal['auc', 'prc-auc',
      'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy',
      'sid', 'wasserstein', 'f1', 'mcc', 'bounded_rmse', 'bounded_mae', 'bounded_mse']],
      default=[]) Additional metrics to use to evaluate the model. Not used for early
      stopping.", metavar=None)
    --features_generator: _StoreAction(option_strings=['--features_generator'], dest='features_generator',
      nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan',
      'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None)
      Method(s) of generating additional features.', metavar=None)
    --features_only: _StoreTrueAction(option_strings=['--features_only'], dest='features_only',
      nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
      Use only the additional features in an FFN, no graph network.', metavar=None)
    --features_path: _StoreAction(option_strings=['--features_path'], dest='features_path',
      nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str],
      default=None) Path(s) to features to use in FNN (instead of features_generator).',
      metavar=None)
    --ffn_hidden_size: _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size',
      nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int,
      default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).',
      metavar=None)
    --ffn_num_layers: _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers',
      nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int,
      default=2) Number of layers in FFN after MPN encoding.', metavar=None)
    --final_lr: _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None,
      const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float,
      default=0.0001) Final learning rate.', metavar=None)
    --folds_file: _StoreAction(option_strings=['--folds_file'], dest='folds_file',
      nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
      default=None) Optional file of fold labels.', metavar=None)
    --freeze_first_only: _StoreTrueAction(option_strings=['--freeze_first_only'],
      dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None,
      help='(bool, default=False) Determines whether or not to use checkpoint_frzn
      for just the first encoder.\n    Default (False) is to use the checkpoint to
      freeze all encoders.\n    (only relevant for number_of_molecules > 1, where
      checkpoint model has number_of_molecules = 1)', metavar=None)
    --frzn_ffn_layers: _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers',
      nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int,
      default=0) Overwrites weights for the first n layers of the ffn from checkpoint
      model (specified checkpoint_frzn),\n    where n is specified in the input.\n    Automatically
      also freezes mpnn weights.', metavar=None)
    --gpu: _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None,
      default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which
      GPU to use.', metavar=None)
    --grad_clip: _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None,
      const=None, default=None, type=<class 'float'>, choices=None, help='(float,
      default=None) Maximum magnitude of gradient during training.', metavar=None)
    --help: _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None,
      default='==SUPPRESS==', type=None, choices=None, help='show this help message
      and exit', metavar=None)
    --hidden_size: _StoreAction(option_strings=['--hidden_size'], dest='hidden_size',
      nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int,
      default=300) Dimensionality of hidden layers in MPN.', metavar=None)
    --hidden_size_solvent: _StoreAction(option_strings=['--hidden_size_solvent'],
      dest='hidden_size_solvent', nargs=None, const=None, default=300, type=<class
      'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers
      in solvent MPN if :code:`reaction_solvent` is True.', metavar=None)
    --ignore_columns: _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns',
      nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str],
      default=None) Name of the columns to ignore when :code:`target_columns` is not
      provided.', metavar=None)
    --init_lr: _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None,
      const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float,
      default=0.0001) Initial learning rate.', metavar=None)
    --log_frequency: _StoreAction(option_strings=['--log_frequency'], dest='log_frequency',
      nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int,
      default=10) The number of batches between each logging of the training loss.',
      metavar=None)
    --loss_function: _StoreAction(option_strings=['--loss_function'], dest='loss_function',
      nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type
      at 0x7f2631a7eee0>, choices=['mse', 'bounded_mse', 'binary_cross_entropy', 'cross_entropy',
      'mcc', 'sid', 'wasserstein', 'mve', 'evidential', 'dirichlet'], help="(Literal['mse',
      'bounded_mse', 'binary_cross_entropy', 'cross_entropy', 'mcc', 'sid', 'wasserstein',
      'mve', 'evidential', 'dirichlet'], default=None) Choice of loss function. Loss
      functions are limited to compatible dataset types.", metavar=None)
    --max_data_size: _StoreAction(option_strings=['--max_data_size'], dest='max_data_size',
      nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int,
      default=None) Maximum number of data points to load.', metavar=None)
    --max_lr: _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None,
      const=None, default=0.001, type=<class 'float'>, choices=None, help='(float,
      default=0.001) Maximum learning rate.', metavar=None)
    --metric: _StoreAction(option_strings=['--metric'], dest='metric', nargs=None,
      const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7f2631a7edc0>,
      choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy',
      'binary_cross_entropy', 'sid', 'wasserstein', 'f1', 'mcc', 'bounded_rmse', 'bounded_mae',
      'bounded_mse'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\',
      \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\', \'sid\',
      \'wasserstein\', \'f1\', \'mcc\', \'bounded_rmse\', \'bounded_mae\', \'bounded_mse\'],
      default=None) Metric to use during evaluation. It is also used with the validation
      set for early stopping.\n    Defaults to "auc" for classification, "rmse" for
      regression, and "sid" for spectra.', metavar=None)
    --mpn_shared: _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared',
      nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
      Whether to use the same message passing neural network for all input molecules\n    Only
      relevant if :code:`number_of_molecules > 1`', metavar=None)
    --multiclass_num_classes: _StoreAction(option_strings=['--multiclass_num_classes'],
      dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class
      'int'>, choices=None, help='(int, default=3) Number of classes when running
      multiclass classification.', metavar=None)
    --no_atom_descriptor_scaling: _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'],
      dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None,
      choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None)
    --no_bond_features_scaling: _StoreTrueAction(option_strings=['--no_bond_features_scaling'],
      dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None,
      choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None)
    --no_cache_mol: _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol',
      nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
      Whether to not cache the RDKit molecule for each SMILES string to reduce memory
      usage (cached by default).', metavar=None)
    --no_cuda: _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0,
      const=True, default=False, type=None, choices=None, help='(bool, default=False)
      Turn off cuda (i.e., use CPU instead of GPU).', metavar=None)
    --no_features_scaling: _StoreTrueAction(option_strings=['--no_features_scaling'],
      dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None,
      help='(bool, default=False) Turn off scaling of features.', metavar=None)
    --num_folds: _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None,
      const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1)
      Number of folds when performing cross validation.', metavar=None)
    --num_workers: _StoreAction(option_strings=['--num_workers'], dest='num_workers',
      nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int,
      default=8) Number of workers for the parallel data loading (0 means sequential).',
      metavar=None)
    --number_of_molecules: _StoreAction(option_strings=['--number_of_molecules'],
      dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>,
      choices=None, help='(int, default=1) Number of molecules in each input to the
      model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).',
      metavar=None)
    --overwrite_default_atom_features: _StoreTrueAction(option_strings=['--overwrite_default_atom_features'],
      dest='overwrite_default_atom_features', nargs=0, const=True, default=False,
      type=None, choices=None, help='(bool, default=False) Overwrites the default
      atom descriptors with the new ones instead of concatenating them.\n    Can only
      be used if atom_descriptors are used as a feature.', metavar=None)
    --overwrite_default_bond_features: _StoreTrueAction(option_strings=['--overwrite_default_bond_features'],
      dest='overwrite_default_bond_features', nargs=0, const=True, default=False,
      type=None, choices=None, help='(bool, default=False) Overwrites the default
      atom descriptors with the new ones instead of concatenating them', metavar=None)
    --phase_features_path: _StoreAction(option_strings=['--phase_features_path'],
      dest='phase_features_path', nargs=None, const=None, default=None, type=<class
      'str'>, choices=None, help='(str, default=None) Path to features used to indicate
      the phase of the data in one-hot vector form. Used in spectra datatype.', metavar=None)
    --pytorch_seed: _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed',
      nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int,
      default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None)
    --quiet: _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True,
      default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential
      print statements.', metavar=None)
    --reaction: _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0,
      const=True, default=False, type=None, choices=None, help='(bool, default=False)
      Whether to adjust MPNN layer to take reactions as input instead of molecules.',
      metavar=None)
    --reaction_mode: '_StoreAction(option_strings=[''--reaction_mode''], dest=''reaction_mode'',
      nargs=None, const=None, default=''reac_diff'', type=<function get_literals.<locals>.var_type
      at 0x7f2631a7e790>, choices=[''reac_prod'', ''reac_diff'', ''prod_diff'', ''reac_prod_balance'',
      ''reac_diff_balance'', ''prod_diff_balance''], help="(Literal[''reac_prod'',
      ''reac_diff'', ''prod_diff'', ''reac_prod_balance'', ''reac_diff_balance'',
      ''prod_diff_balance''], default=reac_diff) Choices for construction of atom
      and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants
      feature with the products feature.\n    :code:`reac_diff`: concatenates the
      reactants feature with the difference in features between reactants and products.\n    :code:`prod_diff`:
      concatenates the products feature with the difference in features between reactants
      and products.\n    :code:`reac_prod_balance`: concatenates the reactants feature
      with the products feature, balances imbalanced reactions.\n    :code:`reac_diff_balance`:
      concatenates the reactants feature with the difference in features between reactants
      and products, balances imbalanced reactions.\n    :code:`prod_diff_balance`:
      concatenates the products feature with the difference in features between reactants
      and products, balances imbalanced reactions.", metavar=None)'
    --reaction_solvent: _StoreTrueAction(option_strings=['--reaction_solvent'], dest='reaction_solvent',
      nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
      Whether to adjust the MPNN layer to take as input a reaction and a molecule,
      and to encode them with separate MPNNs.', metavar=None)
    --resume_experiment: _StoreTrueAction(option_strings=['--resume_experiment'],
      dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None,
      help='(bool, default=False) Whether to resume the experiment.\n    Loads test
      results from any folds that have already been completed and skips training those
      folds.', metavar=None)
    --save_dir: _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None,
      const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None)
      Directory where model checkpoints will be saved.', metavar=None)
    --save_preds: _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds',
      nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
      Whether to save test split predictions during training.', metavar=None)
    --save_smiles_splits: _StoreTrueAction(option_strings=['--save_smiles_splits'],
      dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None,
      help='(bool, default=False) Save smiles for each train/val/test splits for prediction
      convenience later.', metavar=None)
    --seed: _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None,
      default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed
      to use when splitting data into train/val/test sets.\n    When :code`num_folds
      > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.',
      metavar=None)
    --separate_test_atom_descriptors_path: _StoreAction(option_strings=['--separate_test_atom_descriptors_path'],
      dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None,
      type=<class 'str'>, choices=None, help='(str, default=None) Path to file with
      extra atom descriptors for separate test set.', metavar=None)
    --separate_test_bond_features_path: _StoreAction(option_strings=['--separate_test_bond_features_path'],
      dest='separate_test_bond_features_path', nargs=None, const=None, default=None,
      type=<class 'str'>, choices=None, help='(str, default=None) Path to file with
      extra atom descriptors for separate test set.', metavar=None)
    --separate_test_features_path: _StoreAction(option_strings=['--separate_test_features_path'],
      dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class
      'str'>, choices=None, help='(List[str], default=None) Path to file with features
      for separate test set.', metavar=None)
    --separate_test_path: _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path',
      nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
      default=None) Path to separate test set, optional.', metavar=None)
    --separate_test_phase_features_path: _StoreAction(option_strings=['--separate_test_phase_features_path'],
      dest='separate_test_phase_features_path', nargs=None, const=None, default=None,
      type=<class 'str'>, choices=None, help='(str, default=None) Path to file with
      phase features for separate test set.', metavar=None)
    --separate_val_atom_descriptors_path: _StoreAction(option_strings=['--separate_val_atom_descriptors_path'],
      dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None,
      type=<class 'str'>, choices=None, help='(str, default=None) Path to file with
      extra atom descriptors for separate val set.', metavar=None)
    --separate_val_bond_features_path: _StoreAction(option_strings=['--separate_val_bond_features_path'],
      dest='separate_val_bond_features_path', nargs=None, const=None, default=None,
      type=<class 'str'>, choices=None, help='(str, default=None) Path to file with
      extra atom descriptors for separate val set.', metavar=None)
    --separate_val_features_path: _StoreAction(option_strings=['--separate_val_features_path'],
      dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class
      'str'>, choices=None, help='(List[str], default=None) Path to file with features
      for separate val set.', metavar=None)
    --separate_val_path: _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path',
      nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str,
      default=None) Path to separate val set, optional.', metavar=None)
    --separate_val_phase_features_path: _StoreAction(option_strings=['--separate_val_phase_features_path'],
      dest='separate_val_phase_features_path', nargs=None, const=None, default=None,
      type=<class 'str'>, choices=None, help='(str, default=None) Path to file with
      phase features for separate val set.', metavar=None)
    --show_individual_scores: _StoreTrueAction(option_strings=['--show_individual_scores'],
      dest='show_individual_scores', nargs=0, const=True, default=False, type=None,
      choices=None, help='(bool, default=False) Show all scores for individual targets,
      not just average, at the end.', metavar=None)
    --smiles_columns: _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns',
      nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str],
      default=None) List of names of the columns containing SMILES strings.\n    By
      default, uses the first :code:`number_of_molecules` columns.', metavar=None)
    --spectra_activation: _StoreAction(option_strings=['--spectra_activation'], dest='spectra_activation',
      nargs=None, const=None, default='exp', type=<function get_literals.<locals>.var_type
      at 0x7f2631a7e820>, choices=['exp', 'softplus'], help="(Literal['exp', 'softplus'],
      default=exp) Indicates which function to use in dataset_type spectra training
      to constrain outputs to be positive.", metavar=None)
    --spectra_phase_mask_path: _StoreAction(option_strings=['--spectra_phase_mask_path'],
      dest='spectra_phase_mask_path', nargs=None, const=None, default=None, type=<class
      'str'>, choices=None, help='(str, default=None) Path to a file containing a
      phase mask array, used for excluding particular regions in spectra predictions.',
      metavar=None)
    --spectra_target_floor: _StoreAction(option_strings=['--spectra_target_floor'],
      dest='spectra_target_floor', nargs=None, const=None, default=1e-08, type=<class
      'float'>, choices=None, help='(float, default=1e-08) Values in targets for dataset
      type spectra are replaced with this value, intended to be a small positive number
      used to enforce positive values.', metavar=None)
    --split_key_molecule: _StoreAction(option_strings=['--split_key_molecule'], dest='split_key_molecule',
      nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int,
      default=0) The index of the key molecule used for splitting when multiple molecules
      are present and constrained split_type is used, like scaffold_balanced or random_with_repeated_smiles.\n       Note
      that this index begins with zero for the first molecule.', metavar=None)
    --split_sizes: _StoreAction(option_strings=['--split_sizes'], dest='split_sizes',
      nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float],
      default=None) Split proportions for train/validation/test sets.', metavar=None)
    --split_type: _StoreAction(option_strings=['--split_type'], dest='split_type',
      nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type
      at 0x7f2631a7ee50>, choices=['random', 'scaffold_balanced', 'predetermined',
      'crossval', 'cv', 'cv-no-test', 'index_predetermined', 'random_with_repeated_smiles'],
      help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv',
      'cv-no-test', 'index_predetermined', 'random_with_repeated_smiles'], default=random)
      Method of splitting the data into train/val/test.", metavar=None)
    --target_columns: _StoreAction(option_strings=['--target_columns'], dest='target_columns',
      nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str],
      default=None) Name of the columns containing target values.\n    By default,
      uses all columns except the SMILES column and the :code:`ignore_columns`.',
      metavar=None)
    --target_weights: _StoreAction(option_strings=['--target_weights'], dest='target_weights',
      nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float],
      default=None) Weights associated with each target, affecting the relative weight
      of targets in the loss function. Must match the number of target columns.',
      metavar=None)
    --test: _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True,
      default=False, type=None, choices=None, help='(bool, default=False) Whether
      to skip training and only test the model.', metavar=None)
    --test_fold_index: _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index',
      nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int,
      default=None) Which fold to use as test for leave-one-out cross val.', metavar=None)
    --undirected: _StoreTrueAction(option_strings=['--undirected'], dest='undirected',
      nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False)
      Undirected edges (always sum the two relevant bond vectors).', metavar=None)
    --val_fold_index: _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index',
      nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int,
      default=None) Which fold to use as val for leave-one-out cross val.', metavar=None)
    --warmup_epochs: _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs',
      nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float,
      default=2.0) Number of epochs during which learning rate increases linearly
      from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases
      exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None)
    -h: _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None,
      default='==SUPPRESS==', type=None, choices=None, help='show this help message
      and exit', metavar=None)
_optionals:
  desc: null
  value: <argparse._ArgumentGroup object at 0x7f26ff113f70>
_parsed:
  desc: null
  value: true
_positionals:
  desc: null
  value: <argparse._ArgumentGroup object at 0x7f2631d31fd0>
_registries:
  desc: null
  value:
    action:
      append: argparse._AppendAction
      append_const: argparse._AppendConstAction
      count: argparse._CountAction
      extend: argparse._ExtendAction
      help: argparse._HelpAction
      'null': argparse._StoreAction
      parsers: argparse._SubParsersAction
      store: argparse._StoreAction
      store_const: argparse._StoreConstAction
      store_false: argparse._StoreFalseAction
      store_true: argparse._StoreTrueAction
      version: argparse._VersionAction
    type:
      'null': argparse.ArgumentParser.__init__.<locals>.identity
_subparser_buffer:
  desc: null
  value: []
_subparsers:
  desc: null
  value: null
_task_names:
  desc: null
  value: null
_train_data_size:
  desc: null
  value: null
_underscores_to_dashes:
  desc: null
  value: false
_wandb:
  desc: null
  value:
    cli_version: 0.13.3
    framework: torch
    is_jupyter_run: false
    is_kaggle_kernel: false
    python_version: 3.8.13
    start_time: 1667740883.021278
    t:
      1:
      - 1
      - 2
      - 3
      - 5
      - 21
      - 53
      - 55
      2:
      - 1
      - 2
      - 3
      - 5
      - 21
      - 53
      - 55
      3:
      - 16
      - 19
      - 23
      4: 3.8.13
      5: 0.13.3
      8:
      - 5
activation:
  desc: null
  value: ReLU
add_help:
  desc: null
  value: true
adding_h:
  desc: null
  value: false
aggregation:
  desc: null
  value: mean
aggregation_norm:
  desc: null
  value: 100
allow_abbrev:
  desc: null
  value: true
args_from_configs:
  desc: null
  value: []
argument_buffer:
  desc: null
  value:
    features_generator:
    - - --features_generator
    - choices:
      - morgan
      - morgan_count
      - rdkit_2d
      - rdkit_2d_normalized
    gpu:
    - - --gpu
    - choices: []
    help:
    - - -h
      - --help
    - action: help
      default: ==SUPPRESS==
      help: show this help message and exit
argument_default:
  desc: null
  value: null
atom_descriptors:
  desc: null
  value: null
atom_descriptors_path:
  desc: null
  value: null
atom_messages:
  desc: null
  value: false
batch_size:
  desc: null
  value: 50
bias:
  desc: null
  value: false
bias_solvent:
  desc: null
  value: false
bond_features_path:
  desc: null
  value: null
cache_cutoff:
  desc: null
  value: 10000
checkpoint_dir:
  desc: null
  value: null
checkpoint_frzn:
  desc: null
  value: null
checkpoint_path:
  desc: null
  value: null
checkpoint_paths:
  desc: null
  value: null
class_balance:
  desc: null
  value: true
class_variables:
  desc: null
  value:
    activation:
      comment: Activation function.
    adding_h:
      comment: "Whether RDKit molecules will be constructed with adding the Hs to\
        \ them. This option is intended to be used\n    with Chemprop's default molecule\
        \ or multi-molecule encoders, or in :code:`reaction_solvent` mode where it\
        \ applies to the solvent only."
    aggregation:
      comment: Aggregation scheme for atomic vectors into molecular vectors
    aggregation_norm:
      comment: For norm aggregation, number by which to divide summed up atomic features
    atom_descriptors:
      comment: "Custom extra atom descriptors.\n    :code:`feature`: used as atom\
        \ features to featurize a given molecule.\n    :code:`descriptor`: used as\
        \ descriptor and concatenated to the machine learned atomic representation."
    atom_descriptors_path:
      comment: Path to the extra atom descriptors.
    atom_messages:
      comment: Centers messages on atoms instead of on bonds.
    batch_size:
      comment: Batch size.
    bias:
      comment: Whether to add bias to linear layers.
    bias_solvent:
      comment: Whether to add bias to linear layers for solvent MPN if :code:`reaction_solvent`
        is True.
    bond_features_path:
      comment: Path to the extra bond descriptors that will be used as bond features
        to featurize a given molecule.
    cache_cutoff:
      comment: "Maximum number of molecules in dataset to allow caching.\n    Below\
        \ this number, caching is used and data loading is sequential.\n    Above\
        \ this number, caching is not used and data loading is parallel.\n    Use\
        \ \"inf\" to always cache."
    checkpoint_dir:
      comment: Directory from which to load model checkpoints (walks directory and
        ensembles all models that are found).
    checkpoint_frzn:
      comment: Path to model checkpoint file to be loaded for overwriting and freezing
        weights.
    checkpoint_path:
      comment: Path to model checkpoint (:code:`.pt` file).
    checkpoint_paths:
      comment: List of paths to model checkpoints (:code:`.pt` files).
    class_balance:
      comment: Trains with an equal number of positives and negatives in each batch.
    config_path:
      comment: "Path to a :code:`.json` file containing arguments. Any arguments present\
        \ in the config file\n    will override arguments specified via the command\
        \ line or by the defaults."
    crossval_index_dir:
      comment: Directory in which to find cross validation index files.
    crossval_index_file:
      comment: Indices of files to use as train/val/test. Overrides :code:`--num_folds`
        and :code:`--seed`.
    data_path:
      comment: Path to data CSV file.
    data_weights_path:
      comment: Path to weights for each molecule in the training data, affecting the
        relative weight of molecules in the loss function
    dataset_type:
      comment: Type of dataset. This determines the default loss function used during
        training.
    depth:
      comment: Number of message passing steps.
    depth_solvent:
      comment: Number of message passing steps for solvent if :code:`reaction_solvent`
        is True.
    dropout:
      comment: Dropout probability.
    empty_cache:
      comment: Whether to empty all caches before training or predicting. This is
        necessary if multiple jobs are run within a single script and the atom or
        bond features change.
    ensemble_size:
      comment: Number of models in ensemble.
    epochs:
      comment: Number of epochs to run.
    evidential_regularization:
      comment: Value used in regularization for evidential loss function. Value used
        in literature was 1.
    explicit_h:
      comment: "Whether H are explicitly specified in input (and should be kept this\
        \ way). This option is intended to be used\n    with the :code:`reaction`\
        \ or :code:`reaction_solvent` options, and applies only to the reaction part."
    extra_metrics:
      comment: Additional metrics to use to evaluate the model. Not used for early
        stopping.
    features_generator:
      comment: Method(s) of generating additional features.
    features_only:
      comment: Use only the additional features in an FFN, no graph network.
    features_path:
      comment: Path(s) to features to use in FNN (instead of features_generator).
    ffn_hidden_size:
      comment: Hidden dim for higher-capacity FFN (defaults to hidden_size).
    ffn_num_layers:
      comment: Number of layers in FFN after MPN encoding.
    final_lr:
      comment: Final learning rate.
    folds_file:
      comment: Optional file of fold labels.
    freeze_first_only:
      comment: "Determines whether or not to use checkpoint_frzn for just the first\
        \ encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n\
        \    (only relevant for number_of_molecules > 1, where checkpoint model has\
        \ number_of_molecules = 1)"
    frzn_ffn_layers:
      comment: "Overwrites weights for the first n layers of the ffn from checkpoint\
        \ model (specified checkpoint_frzn),\n    where n is specified in the input.\n\
        \    Automatically also freezes mpnn weights."
    gpu:
      comment: Which GPU to use.
    grad_clip:
      comment: Maximum magnitude of gradient during training.
    hidden_size:
      comment: Dimensionality of hidden layers in MPN.
    hidden_size_solvent:
      comment: Dimensionality of hidden layers in solvent MPN if :code:`reaction_solvent`
        is True.
    ignore_columns:
      comment: Name of the columns to ignore when :code:`target_columns` is not provided.
    init_lr:
      comment: Initial learning rate.
    log_frequency:
      comment: The number of batches between each logging of the training loss.
    loss_function:
      comment: Choice of loss function. Loss functions are limited to compatible dataset
        types.
    max_data_size:
      comment: Maximum number of data points to load.
    max_lr:
      comment: Maximum learning rate.
    metric:
      comment: "Metric to use during evaluation. It is also used with the validation\
        \ set for early stopping.\n    Defaults to \"auc\" for classification, \"\
        rmse\" for regression, and \"sid\" for spectra."
    mpn_shared:
      comment: "Whether to use the same message passing neural network for all input\
        \ molecules\n    Only relevant if :code:`number_of_molecules > 1`"
    multiclass_num_classes:
      comment: Number of classes when running multiclass classification.
    no_atom_descriptor_scaling:
      comment: Turn off atom feature scaling.
    no_bond_features_scaling:
      comment: Turn off atom feature scaling.
    no_cache_mol:
      comment: Whether to not cache the RDKit molecule for each SMILES string to reduce
        memory usage (cached by default).
    no_cuda:
      comment: Turn off cuda (i.e., use CPU instead of GPU).
    no_features_scaling:
      comment: Turn off scaling of features.
    num_folds:
      comment: Number of folds when performing cross validation.
    num_workers:
      comment: Number of workers for the parallel data loading (0 means sequential).
    number_of_molecules:
      comment: "Number of molecules in each input to the model.\n    This must equal\
        \ the length of :code:`smiles_columns` (if not :code:`None`)."
    overwrite_default_atom_features:
      comment: "Overwrites the default atom descriptors with the new ones instead\
        \ of concatenating them.\n    Can only be used if atom_descriptors are used\
        \ as a feature."
    overwrite_default_bond_features:
      comment: Overwrites the default atom descriptors with the new ones instead of
        concatenating them
    phase_features_path:
      comment: Path to features used to indicate the phase of the data in one-hot
        vector form. Used in spectra datatype.
    pytorch_seed:
      comment: Seed for PyTorch randomness (e.g., random initial weights).
    quiet:
      comment: Skip non-essential print statements.
    reaction:
      comment: Whether to adjust MPNN layer to take reactions as input instead of
        molecules.
    reaction_mode:
      comment: "Choices for construction of atom and bond features for reactions\n\
        \    :code:`reac_prod`: concatenates the reactants feature with the products\
        \ feature.\n    :code:`reac_diff`: concatenates the reactants feature with\
        \ the difference in features between reactants and products.\n    :code:`prod_diff`:\
        \ concatenates the products feature with the difference in features between\
        \ reactants and products.\n    :code:`reac_prod_balance`: concatenates the\
        \ reactants feature with the products feature, balances imbalanced reactions.\n\
        \    :code:`reac_diff_balance`: concatenates the reactants feature with the\
        \ difference in features between reactants and products, balances imbalanced\
        \ reactions.\n    :code:`prod_diff_balance`: concatenates the products feature\
        \ with the difference in features between reactants and products, balances\
        \ imbalanced reactions."
    reaction_solvent:
      comment: Whether to adjust the MPNN layer to take as input a reaction and a
        molecule, and to encode them with separate MPNNs.
    resume_experiment:
      comment: "Whether to resume the experiment.\n    Loads test results from any\
        \ folds that have already been completed and skips training those folds."
    save_dir:
      comment: Directory where model checkpoints will be saved.
    save_preds:
      comment: Whether to save test split predictions during training.
    save_smiles_splits:
      comment: Save smiles for each train/val/test splits for prediction convenience
        later.
    seed:
      comment: "Random seed to use when splitting data into train/val/test sets.\n\
        \    When :code`num_folds > 1`, the first fold uses this seed and all subsequent\
        \ folds add 1 to the seed."
    separate_test_atom_descriptors_path:
      comment: Path to file with extra atom descriptors for separate test set.
    separate_test_bond_features_path:
      comment: Path to file with extra atom descriptors for separate test set.
    separate_test_features_path:
      comment: Path to file with features for separate test set.
    separate_test_path:
      comment: Path to separate test set, optional.
    separate_test_phase_features_path:
      comment: Path to file with phase features for separate test set.
    separate_val_atom_descriptors_path:
      comment: Path to file with extra atom descriptors for separate val set.
    separate_val_bond_features_path:
      comment: Path to file with extra atom descriptors for separate val set.
    separate_val_features_path:
      comment: Path to file with features for separate val set.
    separate_val_path:
      comment: Path to separate val set, optional.
    separate_val_phase_features_path:
      comment: Path to file with phase features for separate val set.
    show_individual_scores:
      comment: Show all scores for individual targets, not just average, at the end.
    smiles_columns:
      comment: "List of names of the columns containing SMILES strings.\n    By default,\
        \ uses the first :code:`number_of_molecules` columns."
    spectra_activation:
      comment: Indicates which function to use in dataset_type spectra training to
        constrain outputs to be positive.
    spectra_phase_mask_path:
      comment: Path to a file containing a phase mask array, used for excluding particular
        regions in spectra predictions.
    spectra_target_floor:
      comment: Values in targets for dataset type spectra are replaced with this value,
        intended to be a small positive number used to enforce positive values.
    split_key_molecule:
      comment: "The index of the key molecule used for splitting when multiple molecules\
        \ are present and constrained split_type is used, like scaffold_balanced or\
        \ random_with_repeated_smiles.\n       Note that this index begins with zero\
        \ for the first molecule."
    split_sizes:
      comment: Split proportions for train/validation/test sets.
    split_type:
      comment: Method of splitting the data into train/val/test.
    target_columns:
      comment: "Name of the columns containing target values.\n    By default, uses\
        \ all columns except the SMILES column and the :code:`ignore_columns`."
    target_weights:
      comment: Weights associated with each target, affecting the relative weight
        of targets in the loss function. Must match the number of target columns.
    test:
      comment: Whether to skip training and only test the model.
    test_fold_index:
      comment: Which fold to use as test for leave-one-out cross val.
    undirected:
      comment: Undirected edges (always sum the two relevant bond vectors).
    val_fold_index:
      comment: Which fold to use as val for leave-one-out cross val.
    warmup_epochs:
      comment: "Number of epochs during which learning rate increases linearly from\
        \ :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases\
        \ exponentially from :code:`max_lr` to :code:`final_lr`."
config_path:
  desc: null
  value: null
conflict_handler:
  desc: null
  value: error
crossval_index_dir:
  desc: null
  value: null
crossval_index_file:
  desc: null
  value: null
data_path:
  desc: null
  value: ./CMPNN/data/tox21.csv
data_weights_path:
  desc: null
  value: null
dataset_type:
  desc: null
  value: classification
depth:
  desc: null
  value: 3
depth_solvent:
  desc: null
  value: 3
description:
  desc: null
  value: null
dropout:
  desc: null
  value: 0.0
empty_cache:
  desc: null
  value: false
ensemble_size:
  desc: null
  value: 1
epilog:
  desc: null
  value: null
epochs:
  desc: null
  value: 1
evidential_regularization:
  desc: null
  value: 0
explicit_h:
  desc: null
  value: false
extra_args:
  desc: null
  value:
  - traindmpnn
  - 'True'
extra_metrics:
  desc: null
  value:
  - mcc
features_generator:
  desc: null
  value: null
features_only:
  desc: null
  value: false
features_path:
  desc: null
  value: null
ffn_hidden_size:
  desc: null
  value: 300
ffn_num_layers:
  desc: null
  value: 2
final_lr:
  desc: null
  value: 0.0001
folds_file:
  desc: null
  value: null
formatter_class:
  desc: null
  value: argparse.HelpFormatter
freeze_first_only:
  desc: null
  value: false
fromfile_prefix_chars:
  desc: null
  value: null
frzn_ffn_layers:
  desc: null
  value: 0
gpu:
  desc: null
  value: null
grad_clip:
  desc: null
  value: null
hidden_size:
  desc: null
  value: 300
hidden_size_solvent:
  desc: null
  value: 300
ignore_columns:
  desc: null
  value: null
init_lr:
  desc: null
  value: 0.0001
log_frequency:
  desc: null
  value: 10
loss_function:
  desc: null
  value: binary_cross_entropy
max_data_size:
  desc: null
  value: null
max_lr:
  desc: null
  value: 0.001
metric:
  desc: null
  value: auc
mpn_shared:
  desc: null
  value: false
multiclass_num_classes:
  desc: null
  value: 3
no_atom_descriptor_scaling:
  desc: null
  value: false
no_bond_features_scaling:
  desc: null
  value: false
no_cache_mol:
  desc: null
  value: false
no_cuda:
  desc: null
  value: false
no_features_scaling:
  desc: null
  value: false
num_folds:
  desc: null
  value: 1
num_workers:
  desc: null
  value: 8
number_of_molecules:
  desc: null
  value: 1
overwrite_default_atom_features:
  desc: null
  value: false
overwrite_default_bond_features:
  desc: null
  value: false
phase_features_path:
  desc: null
  value: null
prefix_chars:
  desc: null
  value: '-'
prog:
  desc: null
  value: __main__.py
pytorch_seed:
  desc: null
  value: 0
quiet:
  desc: null
  value: false
reaction:
  desc: null
  value: false
reaction_mode:
  desc: null
  value: reac_diff
reaction_solvent:
  desc: null
  value: false
resume_experiment:
  desc: null
  value: false
save_dir:
  desc: null
  value: example/gnn_results/
save_preds:
  desc: null
  value: false
save_smiles_splits:
  desc: null
  value: false
seed:
  desc: null
  value: 0
separate_test_atom_descriptors_path:
  desc: null
  value: null
separate_test_bond_features_path:
  desc: null
  value: null
separate_test_features_path:
  desc: null
  value: null
separate_test_path:
  desc: null
  value: null
separate_test_phase_features_path:
  desc: null
  value: null
separate_val_atom_descriptors_path:
  desc: null
  value: null
separate_val_bond_features_path:
  desc: null
  value: null
separate_val_features_path:
  desc: null
  value: null
separate_val_path:
  desc: null
  value: null
separate_val_phase_features_path:
  desc: null
  value: null
show_individual_scores:
  desc: null
  value: false
smiles_columns:
  desc: null
  value:
  - smiles
spectra_activation:
  desc: null
  value: exp
spectra_phase_mask_path:
  desc: null
  value: null
spectra_target_floor:
  desc: null
  value: 1.0e-08
split_key_molecule:
  desc: null
  value: 0
split_sizes:
  desc: null
  value:
  - 0.8
  - 0.1
  - 0.1
split_type:
  desc: null
  value: scaffold_balanced
target_columns:
  desc: null
  value: null
target_weights:
  desc: null
  value: null
task_names:
  desc: null
  value:
  - NR-AR
  - NR-AR-LBD
  - NR-AhR
  - NR-Aromatase
  - NR-ER
  - NR-ER-LBD
  - NR-PPAR-gamma
  - SR-ARE
  - SR-ATAD5
  - SR-HSE
  - SR-MMP
  - SR-p53
test:
  desc: null
  value: false
test_fold_index:
  desc: null
  value: null
undirected:
  desc: null
  value: false
usage:
  desc: null
  value: null
val_fold_index:
  desc: null
  value: null
warmup_epochs:
  desc: null
  value: 2.0
